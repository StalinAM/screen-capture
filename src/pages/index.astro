---
import Layout from '../layouts/Layout.astro'
import Input from '../components/Input.astro'
import Microphone from '../components/icons/Microphone.astro'
import Sound from '../components/icons/Sound.astro'
import Cam from '../components/icons/Cam.astro'
import Play from '../components/icons/Play.astro'
import Stop from '../components/icons/Stop.astro'
import Button from '../components/Button.astro'
---

<Layout title='Welcome to Astro.'>
  <header></header>

  <main class='max-w-5xl m-auto'>
    <h1><strong>Â¡Captura y Comparte!</strong> Grabador de Pantalla Online</h1>
    <section class='mt-10 flex flex-col gap-4 items-start'>
      <form class='flex flex-col gap-4 items-start' action=''>
        <fieldset
          class='flex gap-4 border-[1px] border-slate-200/20 p-4 rounded-lg'
        >
          <legend class='text-sm text-gray-400'>Dispositivos</legend>
          <Input id='microphone'>
            <Microphone
              styleSvg='size-20 inline-block peer-checked:stroke-orange-600 stroke-[#677280]'
              changePath='group-hover:stroke-orange-600 transition-colors ease-in-out duration-300'
            />
          </Input>
          <Input checked='true' id='sound'>
            <Sound
              styleSvg='size-20 inline-block peer-checked:stroke-orange-600 stroke-[#677280]'
              changePath='group-hover:stroke-orange-600 transition-colors ease-in-out duration-300'
            />
          </Input>
          <Input id='webcam'>
            <Cam
              styleSvg='size-20 inline-block peer-checked:stroke-orange-600 stroke-[#677280]'
              changePath='group-hover:stroke-orange-600 transition-colors ease-in-out duration-300'
            />
          </Input>
        </fieldset>
        <fieldset
          class='flex gap-4 border-[1px] border-slate-200/20 p-4 rounded-lg'
        >
          <legend class='text-sm text-gray-400'>Formate de descarga</legend>
          <label
            class='has-[:checked]:border-orange-600 cursor-pointer uppercase py-1 px-4 border-2 rounded-xl border-gray-600'
            for='webm'
          >
            <span>webm</span>
            <input
              id='webm'
              hidden
              name='format'
              type='radio'
              value='webm'
              checked
            />
          </label>
          <label
            class='has-[:checked]:border-orange-600 cursor-pointer uppercase py-1 px-4 border-2 rounded-xl border-gray-600'
            for='mp4'
          >
            <span>mp4</span>
            <input
              class='peer'
              id='mp4'
              hidden
              name='format'
              type='radio'
              value='mp4'
            />
          </label>
        </fieldset>

        <Button type='submit' text='Iniciar'>
          <Play class='text-orange-600 size-6' />
        </Button>
      </form>
    </section>
    <section class='mt-10 flex flex-col gap-4 items-start'>
      <Button id='stop' type='button' text='Detener' active='hidden'>
        <Stop class='size-5 text-orange-600' />
      </Button>
      <video
        id='video'
        class='rounded-lg border border-orange-600 hidden'
        width='400'
        src=''
        controls></video>
    </section>
  </main>
</Layout>
<script>
  const $form = document.querySelector('form')
  const $stop = document.querySelector('#stop')
  const $video = document.querySelector('#video')
  $form.addEventListener('submit', async (e) => {
    e.preventDefault()
    $stop.classList.remove('hidden')

    const valuesInput = Object.fromEntries(
      new window.FormData(e.target as HTMLFormElement)
    )
    const media = await navigator.mediaDevices.getDisplayMedia({
      audio: valuesInput.sound === 'on',
      video: { frameRate: { ideal: 60 } }
    })
    const mediarecorder = new MediaRecorder(media, {
      mimeType: 'video/webm;codecs=vp9'
    })
    mediarecorder.start()

    const recordedChunks = []

    mediarecorder.addEventListener('dataavailable', (e) => {
      if (e.data.size > 0) {
        recordedChunks.push(e.data)
      }
    })
    $stop.addEventListener('click', () => {
      mediarecorder.stop()
      media.getTracks().forEach((track) => track.stop())
    })
    mediarecorder.addEventListener('dataavailable', (e) => {
      // const link = document.createElement('a')
      // link.href = URL.createObjectURL(e.data)
      $video.classList.remove('hidden')
      $video.src = URL.createObjectURL(e.data)
      // link.download = `captura.${valuesInput.format}`
      // link.click()
    })
  })
</script>
